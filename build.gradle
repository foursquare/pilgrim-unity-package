defaultTasks "exportUnityPackage"

project.ext {
    if (System.getenv("UNITY_ROOT") != null) {
        unity_root = System.getenv("UNITY_ROOT")
    } else {
        throw new GradleException("Set UNITY_ROOT env variable")
    }

    if (System.getenv("UNITY_SERIAL") != null) {
        unity_serial = System.getenv("UNITY_SERIAL")
    } else {
        throw new GradleException("Set UNITY_SERIAL env variable")
    }

    if (System.getenv("UNITY_USERNAME") != null) {
        unity_username = System.getenv("UNITY_USERNAME")
    } else {
        throw new GradleException("Set UNITY_USERNAME env variable")
    }

    if (System.getenv("UNITY_PASSWORD") != null) {
        unity_password = System.getenv("UNITY_PASSWORD")
    } else {
        throw new GradleException("Set UNITY_PASSWORD env variable")
    }

    tempDir = file('temp').absolutePath
    pluginSource = file('source/pilgrim-unity-sdk').absolutePath
    pluginBuildDir = file('temp/pilgrim-unity-sdk').absolutePath
    exportPath = file('pilgrim-unity-sdk.unitypackage').absolutePath 
    resolverDir = file('temp/play-services-resolver').absolutePath
}

task buildAndCleanAndroidLibrary(type: GradleBuild) {
    buildFile = "source/android-source/build.gradle"
    tasks = ['clean', 'assembleRelease']
    startParameter.projectProperties = [unity_root: "${unity_root}"]
}

task copyAndroidLibrary(type: Copy) {
    from("source/android-source/pilgrimunitysdk/build/outputs/aar/")
    into("${pluginBuildDir}/Assets/Plugins/Android")
    include("pilgrimunitysdk-release.aar")
    rename("pilgrimunitysdk-release.aar", "pilgrimunitysdk.aar")
}

copyAndroidLibrary.dependsOn(buildAndCleanAndroidLibrary)

task downloadPlayServicesResolver() {
    doLast {
        exec {
            executable "git"
            args "clone", "https://github.com/googlesamples/unity-jar-resolver.git", "${resolverDir}"
        }
    }
}

task exportUnityPackage() {
    doLast {
        def tree = fileTree("${resolverDir}")
        {
            include '*.unitypackage'
        }
        def jarresolver_package = tree.getSingleFile()

        exec {
            executable "${unity_root}/Unity.app/Contents/MacOS/Unity"
            args "-gvh_disable",
                 "-batchmode",
                 "-serial",
                 "${unity_serial}",
                 "-username",
                 "${unity_username}",
                 "-password",
                 "${unity_password}",
                 "-importPackage", "${jarresolver_package}",
                 "-projectPath", "${pluginBuildDir}",
                 "-logFile", "unity-exportPackage.log",
                 "-exportPackage",
                 "Assets/PlayServicesResolver",
                 "Assets/PilgrimUnitySDK/Api",
                 "Assets/PilgrimUnitySDK/Editor",
                 "Assets/PilgrimUnitySDK/Platforms",
                 "Assets/PilgrimUnitySDK/Types",
                 "Assets/Plugins",
                 "${exportPath}",
                 "-quit"
        }
    }
}

task returnLicense() {
    doLast {
        exec {
           executable "${unity_root}/Unity.app/Contents/MacOS/Unity"
           args "-logFile", "unity-returnlicense.log",
                "-quit",
                "-batchmode",
                "-returnlicense"
        }
    }
}

task createTempDirectory(type: Copy) {
    from {"${pluginSource}"}
    into {"${pluginBuildDir}"}
}

task deleteTempDirectory(type: Delete) {
    delete {"${tempDir}"}
}

exportUnityPackage.dependsOn(createTempDirectory, copyAndroidLibrary, downloadPlayServicesResolver)
exportUnityPackage.finalizedBy(deleteTempDirectory, returnLicense)