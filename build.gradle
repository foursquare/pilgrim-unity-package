plugins {
    id "de.undercouch.download" version "3.4.3"
}

project.ext {
    if (System.getenv("UNITY_ROOT") != null) {
        unityRoot = System.getenv("UNITY_ROOT")
    } else {
        throw new GradleException("Set UNITY_ROOT env variable")
    }

    if (System.getenv("UNITY_SERIAL") != null) {
        unitySerial = System.getenv("UNITY_SERIAL")
    } else {
        throw new GradleException("Set UNITY_SERIAL env variable")
    }

    if (System.getenv("UNITY_USERNAME") != null) {
        unityUsername = System.getenv("UNITY_USERNAME")
    } else {
        throw new GradleException("Set UNITY_USERNAME env variable")
    }

    if (System.getenv("UNITY_PASSWORD") != null) {
        unityPassword = System.getenv("UNITY_PASSWORD")
    } else {
        throw new GradleException("Set UNITY_PASSWORD env variable")
    }

    pilgrimiOSVersion = "2.1.2"
    pilgrimAndroidVersion = "2.1.2"
    tempDir = file("temp").absolutePath
    pluginSource = file("source/pilgrim-unity-sdk").absolutePath
    pluginBuildDir = file("temp/pilgrim-unity-sdk").absolutePath
    exportPath = file("pilgrim-unity-sdk.unitypackage").absolutePath
}

configurations {
    pilgrim {
        repositories {
            mavenCentral()
            maven {
                url "https://maven.google.com"
            }
            maven {
                url 'https://foursquare.jfrog.io/foursquare/libs-release/'
            }
        }
    }
}

dependencies {
    pilgrim "android.arch.lifecycle:common:1.1.1"
    pilgrim "com.foursquare:pilgrimsdk:${pilgrimAndroidVersion}"
    pilgrim "com.foursquare:pilgrimsdk-debugging:${pilgrimAndroidVersion}"
}

task downloadPilgrimAndroid(type: Copy) {
    from(configurations.pilgrim)
    into("${tempDir}/android-deps")
}

task copyPilgrimAndroid(type: Copy) {
    from("${tempDir}/android-deps")
    into("${pluginBuildDir}/Assets/PilgrimUnitySDK/Plugins/Android")
}

copyPilgrimAndroid.dependsOn(downloadPilgrimAndroid)

task buildAndCleanAndroidWrapperLibrary(type: GradleBuild) {
    buildFile = "source/android-source/build.gradle"
    tasks = ["clean", "assembleRelease"]
    startParameter.projectProperties = [unityRoot: "${unityRoot}"]
}

task copyAndroidWrapperLibrary(type: Copy) {
    from("source/android-source/pilgrimunitysdk/build/outputs/aar")
    into("${pluginBuildDir}/Assets/PilgrimUnitySDK/Plugins/Android")
    include("pilgrimunitysdk-release.aar")
    rename("pilgrimunitysdk-release.aar", "pilgrimunitysdk.aar")
}

copyAndroidWrapperLibrary.dependsOn(buildAndCleanAndroidWrapperLibrary)

task downloadPilgrimiOS(type: Download) {
    src "https://foursquare.jfrog.io/foursquare/pilgrimsdk-ios/v${pilgrimiOSVersion}/Pilgrim.framework.zip"
    dest "${tempDir}/Pilgrim.framework.zip"
}

task unzipPilgrimiOS() {
    doLast {
        exec {
            executable "unzip"
            args "${tempDir}/Pilgrim.framework.zip", "-d", "${tempDir}"
        }
    }
}

task copyPilgrimiOS(type: Copy) {
    from("${tempDir}/Pilgrim-${pilgrimiOSVersion}/Pilgrim.framework")
    into("${pluginBuildDir}/Assets/PilgrimUnitySDK/Plugins/iOS/Pilgrim.framework")
    include("**")
}

copyPilgrimiOS.dependsOn(downloadPilgrimiOS, unzipPilgrimiOS)

task exportUnityPackage() {
    doLast {
        exec {
            executable "${unityRoot}/Unity.app/Contents/MacOS/Unity"
            args "-gvh_disable",
                 "-batchmode",
                 "-serial",
                 "${unitySerial}",
                 "-username",
                 "${unityUsername}",
                 "-password",
                 "${unityPassword}",
                 "-projectPath", "${pluginBuildDir}",
                 "-logFile", "unity-exportPackage.log",
                 "-exportPackage",
                 "Assets/PilgrimUnitySDK/Api",
                 "Assets/PilgrimUnitySDK/Editor",
                 "Assets/PilgrimUnitySDK/Platforms",
                 "Assets/PilgrimUnitySDK/Plugins",
                 "Assets/PilgrimUnitySDK/Types",
                 "${exportPath}",
                 "-quit"
        }
    }
}

task returnLicense() {
    doLast {
        exec {
           executable "${unityRoot}/Unity.app/Contents/MacOS/Unity"
           args "-logFile", "unity-returnlicense.log",
                "-quit",
                "-batchmode",
                "-returnlicense"
        }
    }
}

task createTempDirectory(type: Copy) {
    from {"${pluginSource}"}
    into {"${pluginBuildDir}"}
}

task deleteTempDirectory(type: Delete) {
    delete {"${tempDir}"}
}

exportUnityPackage.dependsOn(createTempDirectory, copyPilgrimAndroid, copyAndroidWrapperLibrary, copyPilgrimiOS)

if (project.getProperties().get("noReturnLicense")) {
    exportUnityPackage.finalizedBy(deleteTempDirectory)
} else {
    exportUnityPackage.finalizedBy(deleteTempDirectory, returnLicense)
}

defaultTasks "exportUnityPackage"