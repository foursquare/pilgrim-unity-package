defaultTasks "exportUnityPackage"

project.ext {
    if (project.hasProperty('unity_command')) {
        unity_command = project.unity_command
    } else if (System.getenv("UNITY_COMMAND") != null) {
        unity_command = System.getenv("UNITY_COMMAND")
    } else {
        throw new GradleException("Set UNITY_COMMAND env variable or pass as parameter -Punity_command")
    }
    
    tempDir = file('temp').absolutePath
    pluginSource = file('source/pilgrim-unity-sdk').absolutePath
    pluginBuildDir = file('temp/pilgrim-unity-sdk').absolutePath
    exportPath = file('pilgrim-unity-sdk.unitypackage').absolutePath 
    resolverDir = file('temp/play-services-resolver').absolutePath
}

task buildAndCleanAndroidLibrary(type: GradleBuild) {
    buildFile = "source/android-source/build.gradle"
    tasks = ['clean', 'assembleRelease']
}

task copyAndroidLibrary(type: Copy) {
    from("source/android-source/pilgrimunitysdk/build/outputs/aar/")
    into("${pluginBuildDir}/Assets/Plugins/Android")
    include("pilgrimunitysdk-release.aar")
    rename("pilgrimunitysdk-release.aar", "pilgrimunitysdk.aar")
}

copyAndroidLibrary.dependsOn(buildAndCleanAndroidLibrary)

task downloadPlayServicesResolver() {
    doLast {
        exec {
            executable "git"
            args "clone", "https://github.com/googlesamples/unity-jar-resolver.git", "${resolverDir}"
        }
    }
}

task exportUnityPackage() {
    doLast {
        def tree = fileTree("${resolverDir}")
        {
            include '*.unitypackage'
        }
        def jarresolver_package = tree.getSingleFile()

        exec {
            executable "${unity_command}"
            args "-gvh_disable",
                 "-batchmode",
                 "-importPackage", "${jarresolver_package}",
                 "-projectPath", "${pluginBuildDir}",
                 "-logFile", "temp/unity.log",
                 "-exportPackage",
                 "Assets/PlayServicesResolver",
                 "Assets/PilgrimUnitySDK/Api",
                 "Assets/PilgrimUnitySDK/Editor",
                 "Assets/PilgrimUnitySDK/Platforms",
                 "Assets/PilgrimUnitySDK/Types",
                 "Assets/Plugins",
                 "${exportPath}",
                 "-quit"
        }
    }
}

task createTempDirectory(type: Copy) {
    from {"${pluginSource}"}
    into {"${pluginBuildDir}"}
}

task deleteTempDirectory(type: Delete) {
    delete {"${tempDir}"}
}

exportUnityPackage.dependsOn(createTempDirectory, copyAndroidLibrary, downloadPlayServicesResolver)
exportUnityPackage.finalizedBy(deleteTempDirectory)