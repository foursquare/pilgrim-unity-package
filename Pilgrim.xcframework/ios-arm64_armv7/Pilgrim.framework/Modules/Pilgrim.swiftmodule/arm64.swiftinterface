// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Osize -module-name Pilgrim
import Accelerate
import AdSupport
import AppTrackingTransparency
import SystemConfiguration.CaptiveNetwork
import CommonCrypto
import CoreLocation
import CoreML
import CoreMotion
import CoreTelephony
import Dispatch
import Foundation
import MapKit
@_exported import Pilgrim
import SQLite3
import Swift
import SystemConfiguration
import UIKit
import zlib
@objc public protocol FSQPPilgrimDebugLog {
  @objc var timestamp: Foundation.Date { get }
  @objc var level: Pilgrim.DebugLog.Level { get }
  @objc var type: Pilgrim.DebugLog.LogType { get }
  @objc var data: Any? { get }
  @objc var eventDescription: Swift.String { get }
  @objc var isPublic: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class PilgrimCore : ObjectiveC.NSObject {
  @objc public var homeRegions: [Foundation.NSValue] {
    @objc get
  }
  @objc public var workRegions: [Foundation.NSValue] {
    @objc get
  }
  @objc public var debugLogs: [Pilgrim.DebugLog] {
    @objc get
  }
  @objc public func debugLogs(with completion: @escaping ([Pilgrim.DebugLog]) -> Swift.Void)
  @objc public var geofenceArea: Pilgrim.GeofenceRegion? {
    @objc get
  }
  @objc public var geofences: [Pilgrim.Geofence] {
    @objc get
  }
  @objc public var userInfo: [Swift.String : Swift.String] {
    @objc get
  }
  @objc public var liveDebugEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var disableAdIdentitySharing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var lastKnownUserState: Pilgrim.LastKnownUserState? {
    @objc get
  }
  @objc public var isDebugLogsEnabled: Swift.Bool
  @objc public var shouldShowNonPublicLogs: Swift.Bool
  @objc public var oauthToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var pilgrimSDKVersionString: Swift.String {
    @objc get
  }
  @objc public var installId: Swift.String? {
    @objc get
  }
  @objc public var databaseURL: Foundation.URL? {
    @objc get
  }
  @objc convenience override dynamic public init()
  @objc deinit
  @objc public func configure(consumerKey: Swift.String, secret: Swift.String, oauthToken: Swift.String?, delegate: Pilgrim.PilgrimManagerDelegate?, completion: ((Swift.Bool, Swift.Error?) -> Swift.Void)?)
  @objc public func updateCredentials(consumerKey: Swift.String, secret: Swift.String, oauthToken: Swift.String?)
  @objc public func install()
  @objc public func start()
  @objc public func stop(reportDisable: Swift.Bool)
  @objc public func getCurrentLocation(completion: @escaping (Pilgrim.CurrentLocation?, Swift.Error?) -> Swift.Void)
  @objc public func clearAllData(completion: (() -> Swift.Void)?)
  @objc public func deleteDebugLogs()
  @objc public func fireTestDeparture(visit: Pilgrim.Visit, dwellTime: Foundation.TimeInterval)
  @objc public func fireTestVisit(location: CoreLocation.CLLocation)
  @objc public func fireTestVisit(confidence: Pilgrim.Visit.Confidence, locationType: Pilgrim.Visit.LocationType, isDeparture: Swift.Bool)
  @objc public func setUserInfo(_ userInfo: [Swift.String : Swift.String]?, persisted: Swift.Bool)
  @objc public func leave(feedback: Pilgrim.FeedbackProvider.VisitFeedback, visitId: Swift.String, actualVenueId: Swift.String?, completion: ((Swift.Error?) -> Swift.Void)?)
  @objc public func checkin(venueId: Swift.String)
  @objc public func checkin(partnerVenueId: Swift.String)
  @objc public func sendTestSentryMessage()
  @objc public func upsertInterceptors(_ externalIntercetors: [Swift.AnyObject])
  @objc public func refreshGeofences(location: CoreLocation.CLLocation)
  @objc public func presentDebugViewController(from parentViewController: UIKit.UIViewController)
}
extension URLSession {
}
@_hasMissingDesignatedInitializers public class Subscriber<T> {
  @objc deinit
}
@objc public protocol FSQPPilgrimGeofenceEvent {
  @objc var eventType: Pilgrim.GeofenceEvent.EventType { get }
  @objc var geofence: Pilgrim.FSQPPilgrimGeofence { get }
  @objc var location: Pilgrim.FSQPPilgrimLocation { get }
}
@objc public protocol FSQPPilgrimChain {
  @objc var id: Swift.String { get }
  @objc var name: Swift.String { get }
}
@objc public protocol FSQPPilgrimVenueLocation {
  @objc var address: Swift.String? { get }
  @objc var crossStreet: Swift.String? { get }
  @objc var city: Swift.String? { get }
  @objc var state: Swift.String? { get }
  @objc var postalCode: Swift.String? { get }
  @objc var country: Swift.String? { get }
  @objc var coordinate: CoreLocation.CLLocationCoordinate2D { get }
}
@objc public protocol FSQPPilgrimCategoryIcon {
  @objc var prefix: Swift.String { get }
  @objc var suffix: Swift.String { get }
}
@objc public protocol FSQPPilgrimGeofenceArea {
  @objc var lat: CoreLocation.CLLocationDegrees { get }
  @objc var lng: CoreLocation.CLLocationDegrees { get }
  @objc var radius: CoreLocation.CLLocationDistance { get }
  @objc var threshold: CoreLocation.CLLocationDistance { get }
}
@objc public protocol FSQPPilgrimCurrentLocation {
  @objc var currentPlace: Pilgrim.FSQPPilgrimVisit? { get }
  @objc var matchedGeofences: [Pilgrim.FSQPPilgrimGeofenceEvent]? { get }
}
@objc public protocol FSQPPilgrimCategory {
  @objc var id: Swift.String { get }
  @objc var name: Swift.String { get }
  @objc var pluralName: Swift.String? { get }
  @objc var shortName: Swift.String? { get }
  @objc var icon: Pilgrim.FSQPPilgrimCategoryIcon? { get }
  @objc var primary: Swift.Bool { get }
}
@objc public protocol FSQPPilgrimGeofenceBoundary {
  @objc var points: [Pilgrim.FSQPPilgrimLocation]? { get }
  @objc var center: Pilgrim.FSQPPilgrimLocation? { get }
  @objc var radius: Foundation.NSNumber? { get }
  @objc func didEnter(with location: CoreLocation.CLLocation) -> Swift.Bool
  @objc func didExit(with location: CoreLocation.CLLocation) -> Swift.Bool
}
@objc public protocol FSQPPilgrimLocation {
  @objc var lat: CoreLocation.CLLocationDegrees { get }
  @objc var lng: CoreLocation.CLLocationDegrees { get }
  @objc var hacc: CoreLocation.CLLocationAccuracy { get }
  @objc var timestamp: Foundation.Date { get }
  @objc var speed: CoreLocation.CLLocationSpeed { get }
  @objc var heading: CoreLocation.CLLocationDirection { get }
  @objc var altitude: CoreLocation.CLLocationDistance { get }
  @objc var vacc: CoreLocation.CLLocationAccuracy { get }
  @objc var floor: Foundation.NSNumber? { get }
}
@objc public protocol FSQPPilgrimLocationVisit {
  @objc var arrival: Pilgrim.FSQPPilgrimLocation? { get }
  @objc var departure: Pilgrim.FSQPPilgrimLocation? { get }
  @objc var stopDetectionAlgorithm: Swift.String { get }
}
@objc public protocol FSQPPilgrimGeofence {
  @objc var id: Swift.String { get }
  @objc var dwellTime: Foundation.TimeInterval { get }
  @objc var venue: Pilgrim.FSQPPilgrimVenue? { get }
  @objc var categoryIds: [Swift.String]? { get }
  @objc var chainIds: [Swift.String]? { get }
  @objc var partnerVenueId: Swift.String? { get }
  @objc var type: Pilgrim.Geofence.BoundaryType { get }
  @objc var name: Swift.String { get }
  @objc var boundary: Pilgrim.FSQPPilgrimGeofenceBoundary { get }
  @objc var properties: [Swift.String : Swift.String]? { get }
}
@objc public protocol FSQPPilgrimVisit {
  @objc var locationType: Pilgrim.Visit.LocationType { get }
  @objc var locationTypeString: Swift.String { get }
  @objc var confidence: Pilgrim.Visit.Confidence { get }
  @objc var confidenceString: Swift.String { get }
  @objc var venue: Pilgrim.FSQPPilgrimVenue? { get }
  @objc var otherPossibleVenues: [Pilgrim.FSQPPilgrimVenue]? { get }
  @objc var segments: [Pilgrim.FSQPPilgrimUserSegment]? { get }
  @objc var displayName: Swift.String { get }
  @objc var pilgrimVisitId: Swift.String? { get }
  @objc var matchedTrigger: Foundation.NSNumber? { get }
  @objc var locationVisit: Pilgrim.FSQPPilgrimLocationVisit { get }
  @objc var regionLat: Foundation.NSNumber? { get }
  @objc var regionLng: Foundation.NSNumber? { get }
}
@objc public protocol FSQPPilgrimLastKnownUserState {
  @objc var state: Pilgrim.FSQPPilgrimUserState { get }
  @objc var coordinate: CoreLocation.CLLocationCoordinate2D { get }
  @objc var timestamp: Foundation.Date { get }
}
@objc public protocol FSQPPilgrimUserSegment {
  @objc var segmentId: Swift.Int { get }
  @objc var name: Swift.String { get }
}
@objc public protocol FSQPPilgrimVenue {
  @objc var id: Swift.String { get }
  @objc var name: Swift.String { get }
  @objc var probability: Foundation.NSNumber? { get }
  @objc var partnerVenueId: Swift.String? { get }
  @objc var location: Pilgrim.FSQPPilgrimVenueLocation? { get }
  @objc var venueChains: [Pilgrim.FSQPPilgrimChain] { get }
  @objc var categories: [Pilgrim.FSQPPilgrimCategory] { get }
  @objc var primaryCategory: Pilgrim.FSQPPilgrimCategory? { get }
  @objc var hierarchy: [Pilgrim.FSQPPilgrimVenue] { get }
}
@objc public protocol FSQPPilgrimUserState {
  @objc var traveling: Swift.Bool { get }
  @objc var commuting: Swift.Bool { get }
  @objc var state: Swift.String? { get }
  @objc var city: Swift.String? { get }
  @objc var postalCode: Swift.String? { get }
  @objc var country: Swift.String? { get }
  @objc var county: Swift.String? { get }
  @objc var dma: Swift.String? { get }
  @objc var changedComponents: Pilgrim.UserStateComponent { get }
}
